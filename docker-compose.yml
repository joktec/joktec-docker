version: '3.8'

services:
  mongo:
    container_name: joktec-mongo
    image: mongo:7.0.2
    ports:
      - '27017:27017'
    volumes:
      - .docker/mongo/data:/data/db
      - .docker/mongo/backup:/data/backup
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - joktec-network
    restart: always
    logging:
      options:
        max-size: '100k'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo db:27017/speech-api --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    container_name: joktec-postgres
    image: postgres:15.2
    ports:
      - '5432:5432'
    volumes:
      - .docker/postgres/data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    networks:
      - joktec-network
    restart: always
    logging:
      options:
        max-size: '100k'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 30s
      timeout: 10s
      retries: 5

  mysql:
    container_name: joktec-mysql
    image: mysql:8.0
    ports:
      - '3306:3306'
    volumes:
      - .docker/mysql/data:/var/lib/mysql
      - .docker/mysql/backup:/var/lib/backup
      - .docker/mysql/provision/mysql:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_ALLOW_EMPTY_PASSWORD: yes
    networks:
      - joktec-network
    restart: always
    logging:
      options:
        max-size: '100k'
    healthcheck:
      test: mysqladmin ping -h localhost
      interval: 30s
      timeout: 10s
      retries: 5
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --sort_buffer_size=512K --sql_mode="ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION"

  mssql:
    container_name: joktec-mssql
    image: mcr.microsoft.com/azure-sql-edge:latest
    ports:
      - '1433:1433'
    volumes:
      - .docker/mssql/data:/var/opt/mssql
    cap_add:
      - SYS_PTRACE
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=reallyStrongPwd123
    user: mssql:10001   # Set the non-root user explicitly
    networks:
      - joktec-network
    restart: always
    logging:
      options:
        max-size: '100k'

  redis:
    container_name: joktec-redis
    image: redis:6.2.0
    ports:
      - '6379:6379'
    volumes:
      - .docker/redis/data:/data
      - .docker/redis/config/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: root
    networks:
      - joktec-network
    command: redis-server --requirepass root --appendonly yes
    restart: always
    logging:
      options:
        max-size: '100k'
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    container_name: joktec-rabbitmq
    image: rabbitmq:3-management
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - .docker/rabbitmq/data/:/var/lib/rabbitmq/
      - .docker/rabbitmq/log/:/var/log/rabbitmq/
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - joktec-network
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    container_name: joktec-elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.6
    volumes:
      - .docker/elk/elasticsearch/data:/usr/share/elasticsearch/data:Z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      discovery.type: single-node
      bootstrap.memory_lock: true
      xpack.security.enabled: true
      ELASTIC_PASSWORD: admin
    restart: always
    logging:
      options:
        max-size: '100k'
    networks:
      - joktec-network

  minio:
    container_name: joktec-minio
    image: minio/minio
    volumes:
      - .docker/minio/data:/data
    ports:
      - "9000:9000"
      - '9090:9090'
    environment:
      MINIO_ACCESS_KEY: accesskey
      MINIO_SECRET_KEY: secretkey
    restart: always
    logging:
      options:
        max-size: '100k'
    networks:
      - joktec-network
    command: server /data --console-address ":9090"

  grafana:
    container_name: joktec-grafana
    image: grafana/grafana:9.5.2
    ports:
      - "3033:3000"
    volumes:
      - .docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - .docker/grafana/data:/var/lib/grafana
    restart: always
    networks:
      - joktec-network

  nginx:
    container_name: joktec-nginx
    image: jc21/nginx-proxy-manager:latest
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - .docker/nginx/data:/data
      - .docker/nginx/letsencrypt:/etc/letsencrypt
    restart: always
    networks:
      - joktec-network

# Docker Networks
networks:
  joktec-network:
    name: joktec-network
    driver: bridge

# Docker Volumes
volumes:
  .docker:
  setup:
  elasticsearch:
